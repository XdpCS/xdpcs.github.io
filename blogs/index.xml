<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on XdpCs's Website</title><link>https://xdpcs.github.io/blogs/</link><description>Recent content in Blog on XdpCs's Website</description><generator>Hugo</generator><language>en</language><copyright>© Alan Xu</copyright><lastBuildDate>Tue, 11 Jun 2024 00:00:00 +0000</lastBuildDate><atom:link href="https://xdpcs.github.io/blogs/index.xml" rel="self" type="application/rss+xml"/><item><title>encoding/base64</title><link>https://xdpcs.github.io/blogs/go/base64_encoding/</link><pubDate>Tue, 11 Jun 2024 00:00:00 +0000</pubDate><guid>https://xdpcs.github.io/blogs/go/base64_encoding/</guid><description>简介 # base64是一种用64个字符来表示任意二进制数据的方法 用途 # 用于在HTTP协议下传输二进制数据 用于在URL中传输参数 用于加密 用于数据校验，数据压缩，数据编码 Go #在Go语言中，encoding/base64包实现了base64编码和解码</description></item><item><title>Go打印结构体指针中的具体内容，而无需实现String()方法</title><link>https://xdpcs.github.io/blogs/go/print_value/</link><pubDate>Thu, 09 Nov 2023 00:00:00 +0000</pubDate><guid>https://xdpcs.github.io/blogs/go/print_value/</guid><description>痛点 #例子 #package main import &amp;#34;fmt&amp;#34; type TreeNode struct { Val int Left *TreeNode Right *TreeNode } func main() { t := &amp;amp;TreeNode{ Val: 1, Left: &amp;amp;TreeNode{ Val: 2, }, Right: &amp;amp;TreeNode{ Val: 3, }, } fmt.</description></item><item><title>Go语言注释规范</title><link>https://xdpcs.github.io/blogs/go/go_code_comment_standard/</link><pubDate>Mon, 13 Mar 2023 00:00:00 +0000</pubDate><guid>https://xdpcs.github.io/blogs/go/go_code_comment_standard/</guid><description>背景 # 当新接手他人的项目，我们很容易不知所措，不知道这个函数的作用是什么，即使有很好的命名规范，这种事情也会时常发生，甚至有时候几个月不碰这个项目，自己再看这个函数，也会有一种云里雾里的感觉 如果拥有好的注释，方便我们自己以后维护，也方便后来的同事接手你的项目，不至于对你的代码说这写的是啥，像一坨💩 注释规范 # 注释语言看团队，我们团队习惯使用英文，所以都使用英文，只要整个团队统一一个注释语言即可 全部使用单行注释,//后需要使用一个空格 包注释 # 包注释是对包的介绍 每个包都至少有一个包注释，在同一个包下，任一一个源文件中注释即可 放置在package之前，来简短描述这个包的功能 // 包的功能介绍 package 包名称 文件注释 # 每个文件都应有一个文件注释 放置在package之后，需要包含文件名称，文件描述，文件作者及其时间，更新作者及其时间 因为在公司正常开发流程中，可能合并分支的时候，只有自己部门的业务主管，有这个权限进行合并代码，如果去看git的日志，如果只看主分支，只会显示主管的id，很难很快落实到每个人上 package 包名称 // @Title 文件名称 // @Description 文件描述 // @Create 创建作者 日期 时间 // @Update 更新作者 日期 时间 结构体注释和接口注释 # 每个结构体或接口都应有注释 在结构体或接口定义上面，需要有一个对整个结构体或接口的简要介绍 结构体或接口内的每个成员变量也需要有注释 // User defines user login info type User struct { UserName string // user&amp;#39;s name Password string // user&amp;#39;s password } // IUser defines user function type IUser interface { Login() // user login into the system Logout() // user logout the system } 函数和方法的注释 # 每个函数或方法都应有注释 需要包含函数或方法名称、函数或方法描述、函数或方法的创建作者及其创建时间、输入参数及其参数类型和解释、返回参数及其参数类型和解释 在函数或方法定义上面，书写下面的注释 // 函数或方法名称 // @Description 函数或方法描述 // @Create 作者 日期 时间 // @Param 输入参数名 参数类型 解释 // @Return 返回参数名 参数类型 解释 如果涉及到函数或方法的变更，需要写明修改作者、修改日期和时间、修改的功能描述 // @Modified 作者 日期 时间 // @Modify description 修改的功能描述 代码逻辑注释 # 每个代码块都需要添加注释 // This is my wife&amp;#39;s birthday if birthday == 1118 { .</description></item><item><title>Go Module</title><link>https://xdpcs.github.io/blogs/go/go_module/</link><pubDate>Sat, 21 Jan 2023 00:00:00 +0000</pubDate><guid>https://xdpcs.github.io/blogs/go/go_module/</guid><description>公共模块代理: export GOPROXY=https://goproxy.</description></item><item><title>hugo 遇到的问题</title><link>https://xdpcs.github.io/blogs/hugo/hugo_error/</link><pubDate>Tue, 29 Nov 2022 00:00:00 +0000</pubDate><guid>https://xdpcs.github.io/blogs/hugo/hugo_error/</guid><description>问题1 #found no layout file for &amp;#34;HTML&amp;#34; for kind &amp;#34;page&amp;#34;: You should create a template file which matches Hugo Layouts Lookup Rules for this combination.</description></item><item><title>Git 学习</title><link>https://xdpcs.github.io/blogs/git/git_study/</link><pubDate>Fri, 18 Nov 2022 00:00:00 +0000</pubDate><guid>https://xdpcs.github.io/blogs/git/git_study/</guid><description>原理 # 本地仓库由git维护三棵&amp;quot;树&amp;quot; 第一个是工作目录,它拥有实际的文件 第二个是暂存区，它类似于缓存的存在，临时保存你的改动 第三个是HEAD,它指向最后一次提交的结果 概念 #分支 # 分支是用来将特性开发隔离开。在你创建仓库的时候，master或main是默认的分支。我们一般在其他分支上进行开发，完成后再将它们合并到主分支上 你在本地创建的分支，如果不推送到远端仓库，这个分支就只能在本地可见 命令 # 命令只介绍在开发过程中，常用的命令 创建新的git仓库 #git init 添加到暂存区 #git add &amp;lt;filename&amp;gt; git add .</description></item></channel></rss>