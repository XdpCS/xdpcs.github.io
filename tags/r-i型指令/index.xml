<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>R-I型指令 on XdpCs's Website</title><link>https://xdpcs.github.io/tags/r-i%E5%9E%8B%E6%8C%87%E4%BB%A4/</link><description>Recent content in R-I型指令 on XdpCs's Website</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© Jacy Xu</copyright><lastBuildDate>Fri, 25 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://xdpcs.github.io/tags/r-i%E5%9E%8B%E6%8C%87%E4%BB%A4/index.xml" rel="self" type="application/rss+xml"/><item><title>杭电计算机组成实验 实验9-实现R-I型指令的CPU设计实验</title><link>https://xdpcs.github.io/posts/hdu-computer-organization-and-architecture-experiment/ninth_experiment/</link><pubDate>Fri, 25 Dec 2020 00:00:00 +0000</pubDate><guid>https://xdpcs.github.io/posts/hdu-computer-organization-and-architecture-experiment/ninth_experiment/</guid><description>实验内容 # 掌握MIPS R型和I型指令的综合数据通路设计，掌握数据流的多路选通控制方法 掌握取数指令lw和存数指令sw的寻址方式及其有效地址产生的方法 实现MIPS的部分I型和 R型指令的功能 解决方法 # 分析MIPS I型指令的特点，与R型指令有明显的不同：没有rd寄存器，使用rt作为目的寄存器；源操作数中有一个为立即数，位于指令的低16位 在寄存器堆模块的写地址输入端口设置二选一选择器，由于R型和I型的目的寄存器不同，由rd_rt_s控制 16位的立即数imm需要经过扩展才能与rs执行运算操作，对于有符号数的操作，执行的是符号扩展，对于无符号数的操作，执行的是0扩展 R型指令执行rs和rt运算，结果送rd；而I型立即数即数寻址指令则执行rs和扩展后的立即数imm运算，结果送rt。因此ALU的输入数据B端有两个选择：rt或者imm，仍可以通过二选一数据选择器，用rt_imm_s控制信号 需要添加一个数据存储器RAM存放指令访问的数据，读出的数据，意味着要在寄存器堆的写端口加个选择器，用alu_mem_s控制信号，其中要注意一点就是数据存储器的clk至少是CPU频率的2倍以上，我使用了两个clk输入解决这个问题 在实际写代码时，要注意顶层模块中，实例下层模块的顺序，由于译码模块变量多，我将其抽离出来，为了使顶层模块看起来简洁 涉及实验： 具体用到的实验是多功能ALU设计实验、寄存器堆设计实验 、取指令与指令译码实验 代码展示 顶层模块</description></item></channel></rss>