<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>寄存器堆 on XdpCs's Website</title><link>https://xdpcs.github.io/tags/%E5%AF%84%E5%AD%98%E5%99%A8%E5%A0%86/</link><description>Recent content in 寄存器堆 on XdpCs's Website</description><generator>Hugo -- gohugo.io</generator><language>en</language><copyright>© Jacy Xu</copyright><lastBuildDate>Mon, 21 Dec 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://xdpcs.github.io/tags/%E5%AF%84%E5%AD%98%E5%99%A8%E5%A0%86/index.xml" rel="self" type="application/rss+xml"/><item><title>杭电计算机组成实验 实验4-寄存器堆设计实验</title><link>https://xdpcs.github.io/posts/hdu-computer-organization-and-architecture-experiment/fourth_experiment/</link><pubDate>Mon, 21 Dec 2020 00:00:00 +0000</pubDate><guid>https://xdpcs.github.io/posts/hdu-computer-organization-and-architecture-experiment/fourth_experiment/</guid><description>实验内容 # 学习使用Verilog HDL 进行时序电路的设计方法 掌握灵活运用Verilog HDL进行各种描述与建模的技巧和方法 学习寄存器堆的数据传送与读/写工作原理，掌握寄存器堆的设计方法 解决方法 # 分析一个32x32位的寄存器堆，即含有32个寄存器，每个寄存器32位。该寄存器堆有2个读端口、1个写端口，即能够同时读出2个寄存器的值，写入1个寄存器 首先，分析出两个端口读入是5位的地址，读出的数据是32位的两个，该寄存器堆只有一个写端口，还要配合控制信号Write_Reg，且写操作是边沿触发的，所有写入操作的输入信号必须在时钟边沿来临时已经有效 寄存器堆的读操作和写操作的地址译码，只需引用寄存器地址作为数组的下标即可；读只需要组合逻辑，给出寄存器地址，读出数据 代码展示： 顶层模块（需要数据输入在板子上操作）：</description></item></channel></rss>